# dev.off()
# plot residuals against fitted values and quantile-quantile plot
# png(file = "Output/model_residuals.png", units="px", width=1500, height=2000, res=300)
par(mfrow=c(4,2), mar=c(3, 4, 1, 1), mgp=c(2,1,0))
plot(resid(fit.sm.combined) ~ exp(fitted(fit.sm.combined)), col=harvest.data$Room, xlab="Fitted stem mass (g)", ylab="Residual stem mass (g)")
abline(h=0)
qqPlot(residuals(fit.sm.combined), ylab="Residual stem mass (g)")
legend('bottomright',legend=sort(unique(harvest.data$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data$Room))),pch=19,
bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.rm.combined) ~ exp(fitted(fit.rm.combined)), col=harvest.data$Room, xlab="Fitted root mass (g)", ylab="Residual root mass (g)")
abline(h=0)
qqPlot(residuals(fit.rm.combined), ylab="Residual stem mass (g)")
legend('bottomright',legend=sort(unique(harvest.data$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data$Room))),pch=19,
bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.lm.combined) ~ exp(fitted(fit.lm.combined)), col=harvest.data$Room, xlab="Fitted leaf mass (g)", ylab="Residual leaf mass (g)")
abline(h=0)
qqPlot(residuals(fit.lm.combined), ylab="Residual leaf mass (g)")
legend('bottomright',legend=sort(unique(harvest.data$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data$Room))),pch=19,
bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.la.combined) ~ exp(fitted(fit.la.combined)), col=harvest.data$Room, xlab = expression("Fitted leaf area" ~ (cm^{2})), ylab="Residual leaf area" ~ (mm^{2}))
abline(h=0)
qqPlot(residuals(fit.la.combined), ylab="Residual leaf area" ~ (cm^{2}))
legend('bottomright',legend=sort(unique(harvest.data$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data$Room))),pch=19,
bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plots[[4]] = recordPlot()
# dev.off()
pdf(file = "Output/3.model_attributes.pdf")
plots[[3]]
plots[[4]]
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Plot measuremnts vs fitted points to judge the model fits
plots = list()
palette = c("#FF0000FF", "yellow3", "#00FF00FF", "#00FFFFFF", "#0000FFFF", "#FF00FFFF")
for (i in 1:(length(unique(harvest.data$Room)))) {
# for (i in 1:(length(unique(harvest.data$Room))-1)) {
harvest.data.ind = subset(harvest.data, Room %in% i)
par(mfrow=c(2,2), mar=c(3, 4, 1, 1), mgp=c(2,1,0), oma=c(0,0,1,0))
plot(exp(fitted(fit.sm[[i]])), harvest.data.ind$Stemmass, col=palette[i], pch=16, xlab="Fitted stem mass (g)", ylab="Measured stem mass (g)")
abline(0, 1)
text(min(exp(fitted(fit.sm[[i]]))), max(harvest.data.ind$Stemmass)*0.85,
paste("Adj R-squared =", format(round(summary(fit.sm[[i]])$adj.r.squared, 2)),
"\nResidual SE =", format(round(sigma(fit.sm[[i]]), 2)),
"\nlog(SM) =", format(round(coefficients(fit.sm[[i]])[1],2)), "+", format(round(coefficients(fit.sm[[i]])[2],2)),
"* log(D)\n+", format(round(coefficients(fit.sm[[i]])[3],2)), "* log(H)"), pos = 4)
# cat("Linear regression model fitting: log(leaf_area) = ", coefficients(fit.la.combined)[1], "+", coefficients(fit.la.combined)[2],
#     "* log(diameter) +", coefficients(fit.la.combined)[3], "* log(height)\nwith percentage error =", percentage.error.la, "%")
# legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Rooms",lty=NULL,col=palette[i],pch=19,
#        bty="n",ncol=2,cex=0.8,pt.cex=1.2)
plot(exp(fitted(fit.rm[[i]])), harvest.data.ind$Rootmass, col=palette[i], pch=16, xlab="Fitted root mass (g)", ylab="Measured root mass (g)")
abline(0, 1)
text(min(exp(fitted(fit.rm[[i]]))), max(harvest.data.ind$Rootmass)*0.85,
paste("Adj R-squared =", format(round(summary(fit.rm[[i]])$adj.r.squared, 2)),
"\nResidual SE =", format(round(sigma(fit.rm[[i]]), 2)),
"\nlog(RM) =", format(round(coefficients(fit.rm[[i]])[1],2)), "+", format(round(coefficients(fit.rm[[i]])[2],2)),
"* log(D)\n+", format(round(coefficients(fit.rm[[i]])[3],2)), "* log(H)"), pos = 4)
# legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data.ind$Room))),pch=19,
#        bty="n",ncol=2,cex=0.8,pt.cex=1.2)
plot(exp(fitted(fit.lm[[i]])), harvest.data.ind$Leafmass, col=palette[i], pch=16, xlab="Fitted leaf mass (g)", ylab="Measured leaf mass (g)")
abline(0, 1)
text(min(exp(fitted(fit.lm[[i]]))), max(harvest.data.ind$Leafmass)*0.85,
paste("Adj R-squared =", format(round(summary(fit.lm[[i]])$adj.r.squared, 2)),
"\nResidual SE =", format(round(sigma(fit.lm[[i]]), 2)),
"\nlog(LM) =", format(round(coefficients(fit.lm[[i]])[1],2)), "+", format(round(coefficients(fit.lm[[i]])[2],2)),
"* log(D)\n+", format(round(coefficients(fit.lm[[i]])[3],2)), "* log(H)"), pos = 4)
# legend('bottomright',legend=sort(unique(harvest.data$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data.ind$Room))),pch=19,
#        bty="n",ncol=2,cex=0.8,pt.cex=1.2)
plot(exp(fitted(fit.la[[i]])), harvest.data.ind$Leafarea, col=palette[i], pch=16, xlab = expression("Fitted leaf area" ~ (cm^{2})), ylab="Measured leaf area" ~ (cm^{2}))
abline(0, 1)
text(min(exp(fitted(fit.la[[i]]))), max(harvest.data.ind$Leafarea)*0.85,
paste("Adj R-squared =", format(round(summary(fit.la[[i]])$adj.r.squared, 2)),
"\nResidual SE =", format(round(sigma(fit.la[[i]]), 2)),
"\nlog(LA) =", format(round(coefficients(fit.la[[i]])[1],2)), "+", format(round(coefficients(fit.la[[i]])[2],2)),
"* log(D)\n+", format(round(coefficients(fit.la[[i]])[3],2)), "* log(H)"), pos = 4)
legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Room",lty=NULL,col=palette[i],pch=19,
bty="n",ncol=1,cex=0.8,pt.cex=1.2)
mtext(paste("Model fits for individual temperature = room #",i), side = 3, line = -0.5, outer = TRUE)
plots[[1+(i-1)*2]] = recordPlot()
# plot residuals against fitted values and quantile-quantile plot
# png(file = "Output/model_residuals.png", units="px", width=1500, height=2000, res=300)
par(mfrow=c(4,2), mar=c(3, 4, 1, 1), mgp=c(2,1,0))
plot(resid(fit.sm[[i]]) ~ exp(fitted(fit.sm[[i]])), col=palette[i], xlab="Fitted stem mass (g)", ylab="Residual stem mass (g)")
abline(h=0)
qqPlot(residuals(fit.sm[[i]]), ylab="Residual stem mass (g)")
# legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data.ind$Room))),pch=19,
#        bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.rm[[i]]) ~ exp(fitted(fit.rm[[i]])), col=palette[i], xlab="Fitted root mass (g)", ylab="Residual root mass (g)")
abline(h=0)
qqPlot(residuals(fit.rm[[i]]), ylab="Residual stem mass (g)")
# legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data.ind$Room))),pch=19,
#        bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.lm[[i]]) ~ exp(fitted(fit.lm[[i]])), col=palette[i], xlab="Fitted leaf mass (g)", ylab="Residual leaf mass (g)")
abline(h=0)
qqPlot(residuals(fit.lm[[i]]), ylab="Residual leaf mass (g)")
# legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Rooms",lty=NULL,col=rainbow(length(unique(harvest.data.ind$Room))),pch=19,
#        bty="n",ncol=4,cex=0.8,pt.cex=1.2)
plot(resid(fit.la[[i]]) ~ exp(fitted(fit.la[[i]])), col=palette[i], xlab = expression("Fitted leaf area" ~ (cm^{2})), ylab="Residual leaf area" ~ (mm^{2}))
abline(h=0)
qqPlot(residuals(fit.la[[i]]), ylab="Residual leaf area" ~ (cm^{2}))
legend('bottomright',legend=sort(unique(harvest.data.ind$Room)),title="Room",lty=NULL,col=palette[i],pch=19,
bty="n",ncol=1,cex=0.8,pt.cex=1.2)
mtext(paste("Model residuals for individual temperature = room #",i), side = 3, line = -0.5, outer = TRUE)
plots[[i*2]] = recordPlot()
}
pdf(file = "Output/3.model_attributes_rooms.pdf")
plots
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Plot the comparison between both model structures
model.rmse.melt <- melt(model.rmse, id.vars = "attributes")
names(model.rmse.melt)[2] <- c("models")
model.rmse.melt$variables = as.factor("rmse")
model.error.melt <- melt(model.error, id.vars = "attributes")
names(model.error.melt)[2] <- c("models")
model.error.melt$variables = as.factor("error")
model.summary = rbind(model.rmse.melt,model.error.melt)
model.summary$models = ifelse(model.summary$models %in% as.factor(c("rmse.individual","error.individual")),"individual","combined")
png("Output/3.compare_models_ind_comb.png", units="px", width=2000, height=1600, res=220)
p1 = ggplot(data = model.summary, aes(x = attributes, y = value, group = models, fill = models)) +
# ggplot(data = bic.melt, aes(x=factor(bic.melt$Treatment, levels=unique(as.character(bic.melt$Treatment))), y=BIC, fill = Model_setting)) +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~ variables, scales = "free") +
scale_fill_brewer(palette = "Set1", name = "Regression fitting") +
xlab("Seedling attributes") +
ylab("Model measures") +
# ggtitle("BIC for various model settings") +
theme_bw() +
scale_x_discrete(breaks=c("la","lm","rm","sm"), labels=c("Leafarea","Leafmass","Rootmass","Stemmass")) +
theme(legend.title = element_text(colour="black", size=10)) +
theme(legend.text = element_text(colour="black", size=10)) +
theme(legend.position = c(0.3,0.85)) +
theme(legend.key.height=unit(1,"line")) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_text(size = 12, vjust=-.2)) +
theme(axis.title.y = element_text(size = 12, vjust=0.3)) +
theme(axis.text.x = element_text(angle=45)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print (p1)
dev.off()
#-----------------------------------------------------------------------------------------
# Print and save the model comparison summary
sink("Output/3.models_summary.txt")
cat("Stemmass models:")
cat("\n"); cat("Combined linear regression model:"); cat("\n")
cat("log(Stemmass) = ", coefficients(fit.sm.combined)[1], "+",
coefficients(fit.sm.combined)[2],"* log(Diameter) +", coefficients(fit.sm.combined)[3], "* log(Height)")
cat("\n"); cat("\n"); cat("Individual linear regression models:"); cat("\n")
for (i in 1:(length(unique(harvest.data$Room)))) {
cat("log(Stemmass) = ", coefficients(fit.sm[[i]])[1], "+",
coefficients(fit.sm[[i]])[2],"* log(Diameter) +", coefficients(fit.sm[[i]])[3], "* log(Height)")
cat("\n")
}
cat("\n"); cat("\n"); cat("Rootmass models:"); cat("\n")
cat("Combined linear regression model:"); cat("\n")
cat("log(Rootmass) = ", coefficients(fit.rm.combined)[1], "+",
coefficients(fit.rm.combined)[2],"* log(Diameter) +", coefficients(fit.rm.combined)[3], "* log(Height)")
cat("\n"); cat("\n"); cat("Individual linear regression models:"); cat("\n")
for (i in 1:(length(unique(harvest.data$Room)))) {
cat("log(Rootmass) = ", coefficients(fit.rm[[i]])[1], "+",
coefficients(fit.rm[[i]])[2],"* log(Diameter) +", coefficients(fit.rm[[i]])[3], "* log(Height)")
cat("\n")
}
cat("\n"); cat("\n"); cat("Leafmass models:"); cat("\n")
cat("Combined linear regression model:"); cat("\n")
cat("log(Leafmass) = ", coefficients(fit.lm.combined)[1], "+",
coefficients(fit.lm.combined)[2],"* log(Diameter) +", coefficients(fit.lm.combined)[3], "* log(Height)")
cat("\n"); cat("\n"); cat("Individual linear regression models:"); cat("\n")
for (i in 1:(length(unique(harvest.data$Room)))) {
cat("log(Leafmass) = ", coefficients(fit.lm[[i]])[1], "+",
coefficients(fit.lm[[i]])[2],"* log(Diameter) +", coefficients(fit.lm[[i]])[3], "* log(Height)")
cat("\n")
}
cat("\n"); cat("\n"); cat("Leafarea models:"); cat("\n")
cat("Combined linear regression model:"); cat("\n")
cat("log(Leafarea) = ", coefficients(fit.la.combined)[1], "+",
coefficients(fit.la.combined)[2],"* log(Diameter) +", coefficients(fit.la.combined)[3], "* log(Height)")
cat("\n"); cat("\n"); cat("Individual linear regression models:"); cat("\n")
for (i in 1:(length(unique(harvest.data$Room)))) {
cat("log(Leafarea) = ", coefficients(fit.la[[i]])[1], "+",
coefficients(fit.la[[i]])[2],"* log(Diameter) +", coefficients(fit.la[[i]])[3], "* log(Height)")
cat("\n")
}
sink()
#-----------------------------------------------------------------------------------------
# Save the biomass data for MCMC CBM
# height.dia$W_treatment = NULL
write.csv(height.dia, file = "Output/Cleaf_Cstem_Croot.csv", row.names = FALSE)
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#- Plot the original biomass data and compare with predicted ones
# Plot the original biomass data
rooms = as.factor(c("1","2","3","4","5","6"))
# Initial harvest data
avg.harvest.data = data.frame(matrix(vector(), 0, 10,
dimnames=list(c(), c("Date", "Room", "Leafarea", "Leafarea_SE", "Leafmass", "Leafmass_SE", "Stemmass", "Stemmass_SE", "Rootmass", "Rootmass_SE"))),
stringsAsFactors=F)
avg.harvest.data[1,c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(initial.harvest[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
avg.harvest.data[1,c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(initial.harvest[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd))/(nrow(initial.harvest)-1)^0.5 # R9 = Standard error of leaf counts
avg.harvest.data$Date = as.Date("2016-01-07")
avg.harvest.data = avg.harvest.data[rep(seq_len(nrow(avg.harvest.data)), each=length(rooms)),]
avg.harvest.data$Room = rooms
# Intermediate harvest data 1
# int.harvest.1 = unique(merge(int.harvest.1, height.dia[,c("Room","Pot")]))
int.harvest.1$Date = as.Date("2016-01-29")
for(i in 1:length(rooms)) {
int.harvest.1.idn = subset(int.harvest.1,Room==rooms[i])
avg.harvest.data[nrow(avg.harvest.data)+1, c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(int.harvest.1.idn[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
avg.harvest.data[nrow(avg.harvest.data), c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(int.harvest.1.idn[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd, na.rm = TRUE))/(nrow(int.harvest.1.idn))^0.5 # R9 = Standard error of leaf counts
avg.harvest.data$Date[nrow(avg.harvest.data)] = int.harvest.1.idn$Date[1]
avg.harvest.data$Room[nrow(avg.harvest.data)] = rooms[i]
}
# Intermediate harvest data 2
# int.harvest.2 = unique(merge(int.harvest.2, height.dia[,c("Room","Pot")]))
int.harvest.2$Date = as.Date("2016-02-10")
for(i in 1:length(rooms)) {
int.harvest.2.idn = subset(int.harvest.2,Room==rooms[i])
avg.harvest.data[nrow(avg.harvest.data)+1, c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(int.harvest.2.idn[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
avg.harvest.data[nrow(avg.harvest.data), c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(int.harvest.2.idn[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd, na.rm = TRUE))/(nrow(int.harvest.2.idn))^0.5 # R9 = Standard error of leaf counts
avg.harvest.data$Date[nrow(avg.harvest.data)] = int.harvest.2.idn$Date[1]
avg.harvest.data$Room[nrow(avg.harvest.data)] = rooms[i]
}
# Final harvest data
# final.harvest = unique(merge(final.harvest, height.dia[,c("Room","Pot")]))
final.harvest = final.harvest[with(final.harvest, order(Room,Date)), ]
for(i in 1:length(rooms)) {
final.harvest.idn = subset(final.harvest,Room==rooms[i])
for(j in 1:2) {
if (j==1) {
final.harvest.idn.date = subset(final.harvest.idn, Date %in% as.Date(c("2016-02-17", "2016-02-18", "2016-02-19")))
} else {
final.harvest.idn.date = subset(final.harvest.idn, Date %in% as.Date(c("2016-02-22", "2016-02-23", "2016-02-24")))
}
avg.harvest.data[nrow(avg.harvest.data)+1, c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(final.harvest.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
avg.harvest.data[nrow(avg.harvest.data), c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(final.harvest.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd, na.rm = TRUE))/(nrow(final.harvest.idn.date))^0.5 # R9 = Standard error of leaf counts
avg.harvest.data$Date[nrow(avg.harvest.data)] = mean(final.harvest.idn.date$Date)
avg.harvest.data$Room[nrow(avg.harvest.data)] = rooms[i]
}
}
# for(j in 1:length(unique(final.harvest.idn$Date))) {
#   final.harvest.idn.date = subset(final.harvest.idn, Date == unique(final.harvest.idn$Date)[j])
#   avg.harvest.data[nrow(avg.harvest.data)+1, c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(final.harvest.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
#   avg.harvest.data[nrow(avg.harvest.data), c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(final.harvest.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd, na.rm = TRUE))/(nrow(final.harvest.idn.date))^0.5 # R9 = Standard error of leaf counts
#   avg.harvest.data$Date[nrow(avg.harvest.data)] = final.harvest.idn.date$Date[1]
#   avg.harvest.data$Room[nrow(avg.harvest.data)] = rooms[i]
# }
melted.harvest.data = melt(avg.harvest.data, id.vars=c("Date","Room"))
melted.harvest.data$Group = as.factor("Measured")
#-----------------------------------------------------------------------------------------
# Data predicted for all 15 replicates from regression analyses done with all available harvest data
keeps = c("Date","Room","Leafarea","Leafmass","Stemmass","Rootmass")
height.dia.crop = height.dia[ , keeps, drop = FALSE]
pred.data = data.frame(matrix(vector(), 0, 10,
dimnames=list(c(), c("Date", "Room", "Leafarea", "Leafarea_SE", "Leafmass", "Leafmass_SE", "Stemmass", "Stemmass_SE", "Rootmass", "Rootmass_SE"))),
stringsAsFactors=F)
pred.data$Date = as.Date(pred.data$Date)
for(i in 1:length(rooms)) {
height.dia.crop.idn = subset(height.dia.crop,Room==rooms[i])
for(j in 1:length(unique(height.dia.crop.idn$Date))) {
height.dia.crop.idn.date = subset(height.dia.crop.idn, Date == unique(height.dia.crop.idn$Date)[j])
pred.data[nrow(pred.data)+1, c("Leafarea", "Leafmass", "Stemmass", "Rootmass")] = colMeans(height.dia.crop.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], na.rm = TRUE) # R8 = Average of leaf counts
pred.data[nrow(pred.data), c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE")] = (apply(height.dia.crop.idn.date[c("Leafarea", "Leafmass", "Stemmass", "Rootmass")], 2, sd, na.rm = TRUE))/(nrow(height.dia.crop.idn.date))^0.5 # R9 = Standard error of leaf counts
pred.data$Date[nrow(pred.data)] = height.dia.crop.idn.date$Date[1]
pred.data$Room[nrow(pred.data)] = rooms[i]
}
}
pred.data$Date = as.Date(pred.data$Date)
# Take the average values for the first day of treatment
pred.data.sub = subset(pred.data, Date %in% as.Date("2016-01-08"))
pred.data.sub[7,c(3:10)] = colMeans(pred.data.sub[,c(3:10)])
pred.data.sub[7,1] = pred.data.sub[1,1]
pred.data[(pred.data$Date %in% as.Date("2016-01-08")), c(1,3:10)] = pred.data.sub[7,c(1,3:10)]
melted.pred.data = melt(pred.data, id.vars=c("Date","Room"))
melted.pred.data$Group = as.factor("Predicted")
melted.data = rbind(melted.harvest.data,melted.pred.data)
# plot all harvest data
plots = list()
meas = as.factor(c("Leafarea", "Leafmass", "Stemmass", "Rootmass"))
error = as.factor(c("Leafarea_SE", "Leafmass_SE", "Stemmass_SE", "Rootmass_SE"))
pd <- position_dodge(1) # move the overlapped errorbars horizontally
for (p in 1:length(meas)) {
summary.data.Cpool = subset(melted.data,variable %in% meas[p])
summary.error.Cpool = subset(melted.data,variable %in% error[p])
summary.error.Cpool$parameter = summary.data.Cpool$value
plots[[p]] = ggplot(summary.error.Cpool, aes(x=Date, y=parameter, group = interaction(Room,Group), colour=as.factor(Room), shape=as.factor(Group))) +
geom_point(position=pd,size=2.5) +
geom_errorbar(position=pd,aes(ymin=parameter-value, ymax=parameter+value), colour="grey", width=2) +
geom_line(position=pd,data = summary.error.Cpool, aes(x = Date, y = parameter, group = interaction(Room,Group), colour=as.factor(Room), linetype=as.factor(Group))) +
ylab(paste(as.character(meas[p]),"(g DM)")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Temperature Room",shape="Data Type",linetype="Data Type") +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.80)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
if (p==1) {
plots[[p]] = plots[[p]] + ylab(expression(Leafarea~"("*cm^"2"*")"))
}
# ggsave(p3,filename=paste("Output/Measured_",meas[p],".png",sep=""))
}
pdf(file = "Output/2.tree_attributes_measured_vs_predicted.pdf",width=12, height=15)
print (do.call(grid.arrange,  plots))
# grid.arrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]])
dev.off()
#-----------------------------------------------------------------------------------------
# Save the biomass data for MCMC CBM
pred.data[,c(5:10)] = pred.data[,c(5:10)] * c1
pred.data[,c(3:4)] = pred.data[,c(3:4)] / 10000
write.csv(pred.data, file = "processed_data/modelled_data.csv", row.names = FALSE)
# write.csv(avg.harvest.data, file = "processed_data/harvest_data.csv", row.names = FALSE)
write.csv(height.dia, file = "processed_data/data.biomass.great.csv", row.names = FALSE)
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#- Plot all vs harvested (height and dia) data to explore the sampling effect on biomass prediction variation
height.dia$datatype = as.character("all")
harvest.data$datatype = as.character("harvested")
# harvest.data = unique(merge(harvest.data, height.dia[,c("Room","Pot")]))
harvest.data$Leafno = NULL
height.dia$temp = NULL
harvest.data$temp = NULL
keeps = c("Date","Room","Height","D","Stemmass","Rootmass","Leafmass","Leafarea","datatype")
harvest.data = harvest.data[ , keeps, drop = FALSE]
avg.harvest.data.sampling = rbind(height.dia,harvest.data)
keeps <- c("Date", "Room", "datatype", "Height", "D", "Leafarea", "Leafmass", "Stemmass", "Rootmass")
avg.harvest.data.sampling = avg.harvest.data.sampling[ , keeps, drop = FALSE]
unique(avg.harvest.data.sampling$Date)
avg.harvest.data.sampling.1 = subset(avg.harvest.data.sampling, Date %in%
as.Date(c("2016-01-28","2016-02-08")))
avg.harvest.data.sampling.1$Date = as.factor(avg.harvest.data.sampling.1$Date)
# avg.harvest.data.sampling.1$Date = as.factor(ifelse(avg.harvest.data.sampling.1$Date %in% as.factor("2016-01-28"),
#                                                   as.character("28~29-01-2016"),as.character("08~10-02-2016")))
avg.harvest.data.sampling.2 = subset(avg.harvest.data.sampling, Date %in%
as.Date(c("2016-01-29","2016-02-10")))
avg.harvest.data.sampling.2$Date = as.Date(ifelse(avg.harvest.data.sampling.2$Date %in% as.Date("2016-01-29"),
as.Date("2016-01-28"),as.Date("2016-02-08")))
avg.harvest.data.sampling.2$Date = as.factor(avg.harvest.data.sampling.2$Date)
# avg.harvest.data.sampling.2$Date = as.factor(ifelse(avg.harvest.data.sampling.2$Date %in% as.factor("2016-01-28"),
#                                            as.character("28~29-01-2016"),as.character("08~10-02-2016")))
# avg.harvest.data.sampling.2 = rbind(avg.harvest.data.sampling.1,avg.harvest.data.sampling.2)
# avg.harvest.data.sampling.2 = subset(avg.harvest.data.sampling, !(Date %in%
#                                                                     as.Date(c("2016-01-28","2016-01-29","2016-02-08","2016-02-10"))))
plots = list()
pd <- position_dodge(0.5)
# ann_text = data.frame(Room = 3, D = 4, Date = factor("2016-02-08", levels = c("2016-01-28","2016-02-08")))
plots[[1]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=D, group=interaction(Room,datatype), colour=as.factor(Room))) +
geom_boxplot() +
geom_jitter(size=0.25) +
geom_point(position=pd, data = avg.harvest.data.sampling.2, aes(x=Room, y=D, group=Room, colour=as.factor(Room)),size=2,shape=5,stroke=1.1) +
labs(colour="Treatments") +
facet_wrap( ~ Date, scales="free_x") +
# scale_fill_manual(name = "", values = c("white", "gray85")) +
# geom_text(data = ann_text,label = paste("Dots = All measured data", "\nTriangles = Harvest data") ) +
annotate("text", x = 2.5, y = 5.2, size = 4, label = paste("Dots = All measured diameters", "\nDiamonds = Harvest diameters")) +
xlab("Treatment room") + ylab("Diameter") + ggtitle("Diameters with treatments") +
# guides(fill=guide_legend(title="Data type")) +
theme_bw() + theme(legend.position = c(0.75,0.08),legend.direction = "horizontal",legend.box = "vertical")
plots[[2]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=Height, group=interaction(Room,datatype), colour=as.factor(Room))) +
geom_boxplot() +
geom_jitter(size=0.25) +
geom_point(position=pd, data = avg.harvest.data.sampling.2, aes(x=Room, y=Height, group=Room, colour=as.factor(Room)),size=3,shape=5,stroke=1.1) +
labs(colour="Treatments") +
facet_wrap( ~ Date, scales="free_x") +
# scale_fill_manual(name = "Data type", values = c("white", "gray85")) +
annotate("text", x = 2.5, y = 75, size = 4, label = paste("Dots = All measured heights", "\nDiamonds = Harvest heights")) +
xlab("Treatment room") + ylab("Height") + ggtitle("Heights with treatments") +
theme_bw() + theme(legend.position = c(0.75,0.08),legend.direction = "horizontal",legend.box = "vertical")
pdf(file = "Output/4.data_sampling.pdf")
plots
dev.off()
# plots[[1]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=D)) + geom_boxplot(aes(fill=datatype)) +
#   geom_jitter(size=0.25) +
#   facet_wrap( ~ Date, scales="free_x") +
#   scale_fill_manual(name = "Data type", values = c("white", "gray85")) +
#   xlab("Treatment room") + ylab("Diameter") + ggtitle("Diameter over time") +
#   guides(fill=guide_legend(title="Data type")) +
#   theme_bw() + theme(legend.position = c(0.75,0.9),legend.direction = "horizontal",legend.box = "vertical")
#
# plots[[2]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=D, group=Room, colour=as.factor(Room))) + geom_boxplot(aes(fill=datatype)) +
#   geom_jitter(size=0.25) +
#   labs(colour="Treatments") +
#   facet_wrap( ~ Date, scales="free_x") +
#   scale_fill_manual(name = "Data type", values = c("white", "gray85")) +
#   xlab("Treatment room") + ylab("Diameter") + ggtitle("Diameter over time with treatments") +
#   guides(fill=guide_legend(title="Data type")) +
#   theme_bw() + theme(legend.position = c(0.75,0.9),legend.direction = "horizontal",legend.box = "vertical")
#
# plots[[3]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=Height)) + geom_boxplot(aes(fill=datatype)) +
#   geom_jitter(size=0.25) +
#   facet_wrap( ~ Date, scales="free_x") +
#   scale_fill_manual(name = "Data type", values = c("white", "gray85")) +
#   xlab("Treatment room") + ylab("Height") + ggtitle("Height over time") +
#   guides(fill=guide_legend(title="Data type")) +
#   theme_bw() + theme(legend.position = c(0.75,0.9),legend.direction = "horizontal",legend.box = "vertical")
#
# plots[[4]] = ggplot(data = avg.harvest.data.sampling.1, aes(x=Room, y=Height, group=Room, colour=as.factor(Room))) + geom_boxplot(aes(fill=datatype)) +
#   geom_jitter(size=0.25) + labs(colour="Treatments") +
#   facet_wrap( ~ Date, scales="free_x") +
#   scale_fill_manual(name = "Data type", values = c("white", "gray85")) +
#   xlab("Treatment room") + ylab("Height") + ggtitle("Height over time with treatments") +
#   guides(fill=guide_legend(title="Data type")) +
#   theme_bw() + theme(legend.position = c(0.75,0.9),legend.direction = "horizontal",legend.box = "vertical")
#
# # plots[[3]] = ggplot(data = avg.harvest.data.sampling.2, aes(x=Date, y=D)) + geom_boxplot(aes(fill=datatype)) +
# #   geom_jitter(size=0.5) +
# #   facet_wrap( ~ Date, scales="free_x") +
# #   xlab("Date") + ylab("Diameter") + ggtitle("Diameter over time") +
# #   guides(fill=guide_legend(title="Data type")) +
# #   theme_bw() + theme(legend.position = c(0.9,0.1))
# # plots[[4]] = ggplot(data = avg.harvest.data.sampling.2, aes(x=Date, y=Height)) + geom_boxplot(aes(fill=datatype)) +
# #   geom_jitter(size=0.5) +
# #   facet_wrap( ~ Date, scales="free_x") +
# #   xlab("Date") + ylab("Height") + ggtitle("Height over time") +
# #   guides(fill=guide_legend(title="Data type")) +
# #   theme_bw() + theme(legend.position = c(0.9,0.1))
#
# pdf(file = "Output/4.data_sampling.pdf")
# plots
# dev.off()
#-----------------------------------------------------------------------------------------
# Plot all H vs D data (harvested and measured) over time
plots = list()
plots[[1]] = ggplot(data = avg.harvest.data.sampling, aes(x=D, y=Height, group=Room, colour=as.factor(Room))) +
geom_point(size=0.5) + stat_smooth(method=lm) +
labs(colour="Rooms") + xlab("Diameter (mm)") + ylab("Height (cm)") +
ggtitle("Height vs Diameter with treatments") +
theme_bw() + theme(legend.position = c(0.85,0.25))
plots[[2]] = ggplot(data = avg.harvest.data.sampling, aes(x=D, y=Height, group=Room, colour=as.factor(Room))) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) + geom_point(size=0.5) +
facet_wrap(~Room, scales="free_x") +
labs(colour="Rooms") + xlab("Diameter (mm)") + ylab("Height (cm)") +
theme_bw() + theme(legend.key.width=unit(0.9,"line")) +
theme(legend.position = c(0.17,0.9),legend.direction = "horizontal",legend.box = "vertical")
pdf(file = "Output/7.height_vs_dia_treatments.pdf")
plots
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Plot all data (harvested and predicted) in log scale over time
plots = list()
font.size = 10
# ggplot(data=avg.harvest.data.sampling, aes(x=D, y=Stemmass, group = interaction(Room,datatype), colour=as.factor(Room), shape=as.factor(datatype), size=as.factor(datatype))) +
#   geom_point() +
#   coord_trans(y = "log10") +
#   scale_size_manual(values=c(1,2))
plot.fun1 <- function(df1,df2,font.size){
plots = ggplot() +
geom_point(data=df1, aes(x=df1[,2], y=df1[,3], group = colnames(df1)[1], colour=as.factor(df1[,1])),size=0.1) +
coord_trans(y = "log10") + ylab(paste(as.character(colnames(df1)[3] ), "(log scale)")) +
xlab(paste(as.character(colnames(df1)[2]))) +
geom_point(data=df2, aes(x = df2[,2], y = df2[,3], group = colnames(df2)[3], colour=as.factor(df2[,1])),pch=2,size=1) +
scale_color_manual(name=paste(as.character(colnames(df1)[1])), values = rainbow(14)) +
theme_bw() + scale_size_manual(name="Data type", values=c(1,2)) +
annotate("text", x = (min(df1[,2])*4), y = (max(df1[,3])*0.9), size = font.size-8,
label = paste("Dots = Predicted", "\nTriangles = Harvest")) +
theme(legend.title = element_text(colour="black", size=font.size-3)) +
theme(legend.text = element_text(colour="black", size = font.size-5)) +
theme(legend.position = c(0.8,0.3)) + theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_text(size = font.size)) + theme(axis.title.y = element_text(size = font.size)) +
theme(legend.key.height=unit(0.5,"line")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
output = plots
}
plots[[1]] = plot.fun1(height.dia[,c("Date","D","Leafarea")], harvest.data[,c("Date","D","Leafarea")], font.size)
plots[[3]] = plot.fun1(height.dia[,c("Date","D","Leafmass")], harvest.data[,c("Date","D","Leafmass")], font.size)
plots[[5]] = plot.fun1(height.dia[,c("Date","D","Stemmass")], harvest.data[,c("Date","D","Stemmass")], font.size)
plots[[7]] = plot.fun1(height.dia[,c("Date","D","Rootmass")], harvest.data[,c("Date","D","Rootmass")], font.size)
plots[[2]] = plot.fun1(height.dia[,c("Date","Height","Leafarea")], harvest.data[,c("Date","Height","Leafarea")], font.size)
plots[[4]] = plot.fun1(height.dia[,c("Date","Height","Leafmass")], harvest.data[,c("Date","Height","Leafmass")], font.size)
plots[[6]] = plot.fun1(height.dia[,c("Date","Height","Stemmass")], harvest.data[,c("Date","Height","Stemmass")], font.size)
plots[[8]] = plot.fun1(height.dia[,c("Date","Height","Rootmass")], harvest.data[,c("Date","Height","Rootmass")], font.size)
pdf(file = "Output/5.tree_attributes_logscale_over_time.pdf")
grid.arrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]])
grid.arrange(plots[[5]],plots[[6]],plots[[7]],plots[[8]])
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Plot all data  (harvested and predicted) with room (temperature) variation
plots = list()
plots[[1]] = plot.fun1(height.dia[,c("Room","D","Leafarea")], harvest.data[,c("Room","D","Leafarea")], font.size)
plots[[3]] = plot.fun1(height.dia[,c("Room","D","Leafmass")], harvest.data[,c("Room","D","Leafmass")], font.size)
plots[[5]] = plot.fun1(height.dia[,c("Room","D","Stemmass")], harvest.data[,c("Room","D","Stemmass")], font.size)
plots[[7]] = plot.fun1(height.dia[,c("Room","D","Rootmass")], harvest.data[,c("Room","D","Rootmass")], font.size)
plots[[2]] = plot.fun1(height.dia[,c("Room","Height","Leafarea")], harvest.data[,c("Room","Height","Leafarea")], font.size)
plots[[4]] = plot.fun1(height.dia[,c("Room","Height","Leafmass")], harvest.data[,c("Room","Height","Leafmass")], font.size)
plots[[6]] = plot.fun1(height.dia[,c("Room","Height","Stemmass")], harvest.data[,c("Room","Height","Stemmass")], font.size)
plots[[8]] = plot.fun1(height.dia[,c("Room","Height","Rootmass")], harvest.data[,c("Room","Height","Rootmass")], font.size)
pdf(file = "Output/6.tree_attributes_logscale_with_temperature.pdf")
grid.arrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]])
grid.arrange(plots[[5]],plots[[6]],plots[[7]],plots[[8]])
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Import TNC data from Duan's experiment to let the CBM know the TNC partitioning
carbohydrates.tnc = read.csv("data/Duan_carbohydrates.csv")
harvest.tnc = read.csv("data/Duan_harvest.csv")
tnc = tnc.analysis(carbohydrates.tnc,harvest.tnc)
#-----------------------------------------------------------------------------------------
